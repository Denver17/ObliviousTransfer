// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: EfficientOT.proto

#include "EfficientOT.pb.h"
#include "EfficientOT.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace EfficientOT {

static const char* OT_method_names[] = {
  "/EfficientOT.OT/RequestParam",
  "/EfficientOT.OT/SendCipherText",
};

std::unique_ptr< OT::Stub> OT::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OT::Stub> stub(new OT::Stub(channel, options));
  return stub;
}

OT::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestParam_(OT_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendCipherText_(OT_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status OT::Stub::RequestParam(::grpc::ClientContext* context, const ::EfficientOT::Request& request, ::EfficientOT::Param* response) {
  return ::grpc::internal::BlockingUnaryCall< ::EfficientOT::Request, ::EfficientOT::Param, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestParam_, context, request, response);
}

void OT::Stub::async::RequestParam(::grpc::ClientContext* context, const ::EfficientOT::Request* request, ::EfficientOT::Param* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::EfficientOT::Request, ::EfficientOT::Param, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestParam_, context, request, response, std::move(f));
}

void OT::Stub::async::RequestParam(::grpc::ClientContext* context, const ::EfficientOT::Request* request, ::EfficientOT::Param* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::EfficientOT::Param>* OT::Stub::PrepareAsyncRequestParamRaw(::grpc::ClientContext* context, const ::EfficientOT::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::EfficientOT::Param, ::EfficientOT::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestParam_, context, request);
}

::grpc::ClientAsyncResponseReader< ::EfficientOT::Param>* OT::Stub::AsyncRequestParamRaw(::grpc::ClientContext* context, const ::EfficientOT::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestParamRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::EfficientOT::CipherText>* OT::Stub::SendCipherTextRaw(::grpc::ClientContext* context, ::EfficientOT::Reply* response) {
  return ::grpc::internal::ClientWriterFactory< ::EfficientOT::CipherText>::Create(channel_.get(), rpcmethod_SendCipherText_, context, response);
}

void OT::Stub::async::SendCipherText(::grpc::ClientContext* context, ::EfficientOT::Reply* response, ::grpc::ClientWriteReactor< ::EfficientOT::CipherText>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::EfficientOT::CipherText>::Create(stub_->channel_.get(), stub_->rpcmethod_SendCipherText_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::EfficientOT::CipherText>* OT::Stub::AsyncSendCipherTextRaw(::grpc::ClientContext* context, ::EfficientOT::Reply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::EfficientOT::CipherText>::Create(channel_.get(), cq, rpcmethod_SendCipherText_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::EfficientOT::CipherText>* OT::Stub::PrepareAsyncSendCipherTextRaw(::grpc::ClientContext* context, ::EfficientOT::Reply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::EfficientOT::CipherText>::Create(channel_.get(), cq, rpcmethod_SendCipherText_, context, response, false, nullptr);
}

OT::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OT_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OT::Service, ::EfficientOT::Request, ::EfficientOT::Param, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::EfficientOT::Request* req,
             ::EfficientOT::Param* resp) {
               return service->RequestParam(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OT_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< OT::Service, ::EfficientOT::CipherText, ::EfficientOT::Reply>(
          [](OT::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::EfficientOT::CipherText>* reader,
             ::EfficientOT::Reply* resp) {
               return service->SendCipherText(ctx, reader, resp);
             }, this)));
}

OT::Service::~Service() {
}

::grpc::Status OT::Service::RequestParam(::grpc::ServerContext* context, const ::EfficientOT::Request* request, ::EfficientOT::Param* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OT::Service::SendCipherText(::grpc::ServerContext* context, ::grpc::ServerReader< ::EfficientOT::CipherText>* reader, ::EfficientOT::Reply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace EfficientOT

