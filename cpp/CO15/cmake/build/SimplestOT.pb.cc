// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimplestOT.proto

#include "SimplestOT.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace SimplestOT {
template <typename>
PROTOBUF_CONSTEXPR ARequest::ARequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ARequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ARequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ARequestDefaultTypeInternal() {}
  union {
    ARequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ARequestDefaultTypeInternal _ARequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CTRequest::CTRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ct_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CTRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CTRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CTRequestDefaultTypeInternal() {}
  union {
    CTRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CTRequestDefaultTypeInternal _CTRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BReply::BReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.b_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BReplyDefaultTypeInternal() {}
  union {
    BReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BReplyDefaultTypeInternal _BReply_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CTReply::CTReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CTReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CTReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CTReplyDefaultTypeInternal() {}
  union {
    CTReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CTReplyDefaultTypeInternal _CTReply_default_instance_;
}  // namespace SimplestOT
static ::_pb::Metadata file_level_metadata_SimplestOT_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_SimplestOT_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_SimplestOT_2eproto = nullptr;
const ::uint32_t TableStruct_SimplestOT_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SimplestOT::ARequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SimplestOT::ARequest, _impl_.a_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SimplestOT::CTRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SimplestOT::CTRequest, _impl_.ct_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SimplestOT::BReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SimplestOT::BReply, _impl_.b_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SimplestOT::CTReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SimplestOT::CTReply, _impl_.message_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::SimplestOT::ARequest)},
        { 9, -1, -1, sizeof(::SimplestOT::CTRequest)},
        { 18, -1, -1, sizeof(::SimplestOT::BReply)},
        { 27, -1, -1, sizeof(::SimplestOT::CTReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::SimplestOT::_ARequest_default_instance_._instance,
    &::SimplestOT::_CTRequest_default_instance_._instance,
    &::SimplestOT::_BReply_default_instance_._instance,
    &::SimplestOT::_CTReply_default_instance_._instance,
};
const char descriptor_table_protodef_SimplestOT_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020SimplestOT.proto\022\nSimplestOT\"\025\n\010AReque"
    "st\022\t\n\001A\030\001 \001(\t\"\027\n\tCTRequest\022\n\n\002ct\030\001 \001(\014\"\023"
    "\n\006BReply\022\t\n\001B\030\001 \001(\t\"\032\n\007CTReply\022\017\n\007messag"
    "e\030\001 \001(\t2y\n\002OT\0223\n\005SendA\022\024.SimplestOT.AReq"
    "uest\032\022.SimplestOT.BReply\"\000\022>\n\016SendCipher"
    "Text\022\025.SimplestOT.CTRequest\032\023.SimplestOT"
    ".CTReply\"\000B6\n\033io.grpc.examples.SimplestO"
    "TB\017SimplestOTProtoP\001\242\002\003HLWb\006proto3"
};
static ::absl::once_flag descriptor_table_SimplestOT_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SimplestOT_2eproto = {
    false,
    false,
    314,
    descriptor_table_protodef_SimplestOT_2eproto,
    "SimplestOT.proto",
    &descriptor_table_SimplestOT_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_SimplestOT_2eproto::offsets,
    file_level_metadata_SimplestOT_2eproto,
    file_level_enum_descriptors_SimplestOT_2eproto,
    file_level_service_descriptors_SimplestOT_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SimplestOT_2eproto_getter() {
  return &descriptor_table_SimplestOT_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SimplestOT_2eproto(&descriptor_table_SimplestOT_2eproto);
namespace SimplestOT {
// ===================================================================

class ARequest::_Internal {
 public:
};

ARequest::ARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SimplestOT.ARequest)
}
ARequest::ARequest(const ARequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ARequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.a_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.a_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_a().empty()) {
    _this->_impl_.a_.Set(from._internal_a(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SimplestOT.ARequest)
}

inline void ARequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.a_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.a_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.a_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ARequest::~ARequest() {
  // @@protoc_insertion_point(destructor:SimplestOT.ARequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ARequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.a_.Destroy();
}

void ARequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ARequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SimplestOT.ARequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.a_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ARequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string A = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_a();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SimplestOT.ARequest.A"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ARequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimplestOT.ARequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string A = 1;
  if (!this->_internal_a().empty()) {
    const std::string& _s = this->_internal_a();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "SimplestOT.ARequest.A");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimplestOT.ARequest)
  return target;
}

::size_t ARequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimplestOT.ARequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string A = 1;
  if (!this->_internal_a().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ARequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ARequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ARequest::GetClassData() const { return &_class_data_; }


void ARequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ARequest*>(&to_msg);
  auto& from = static_cast<const ARequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SimplestOT.ARequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_a().empty()) {
    _this->_internal_set_a(from._internal_a());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ARequest::CopyFrom(const ARequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimplestOT.ARequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARequest::IsInitialized() const {
  return true;
}

void ARequest::InternalSwap(ARequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.a_, lhs_arena,
                                       &other->_impl_.a_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ARequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SimplestOT_2eproto_getter, &descriptor_table_SimplestOT_2eproto_once,
      file_level_metadata_SimplestOT_2eproto[0]);
}
// ===================================================================

class CTRequest::_Internal {
 public:
};

CTRequest::CTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SimplestOT.CTRequest)
}
CTRequest::CTRequest(const CTRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CTRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ct_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ct_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ct().empty()) {
    _this->_impl_.ct_.Set(from._internal_ct(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SimplestOT.CTRequest)
}

inline void CTRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ct_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ct_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ct_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CTRequest::~CTRequest() {
  // @@protoc_insertion_point(destructor:SimplestOT.CTRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CTRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ct_.Destroy();
}

void CTRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CTRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SimplestOT.CTRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ct_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ct();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CTRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimplestOT.CTRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ct = 1;
  if (!this->_internal_ct().empty()) {
    const std::string& _s = this->_internal_ct();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimplestOT.CTRequest)
  return target;
}

::size_t CTRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimplestOT.CTRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ct = 1;
  if (!this->_internal_ct().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_ct());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CTRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTRequest::GetClassData() const { return &_class_data_; }


void CTRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CTRequest*>(&to_msg);
  auto& from = static_cast<const CTRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SimplestOT.CTRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ct().empty()) {
    _this->_internal_set_ct(from._internal_ct());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTRequest::CopyFrom(const CTRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimplestOT.CTRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTRequest::IsInitialized() const {
  return true;
}

void CTRequest::InternalSwap(CTRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ct_, lhs_arena,
                                       &other->_impl_.ct_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SimplestOT_2eproto_getter, &descriptor_table_SimplestOT_2eproto_once,
      file_level_metadata_SimplestOT_2eproto[1]);
}
// ===================================================================

class BReply::_Internal {
 public:
};

BReply::BReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SimplestOT.BReply)
}
BReply::BReply(const BReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.b_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.b_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_b().empty()) {
    _this->_impl_.b_.Set(from._internal_b(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SimplestOT.BReply)
}

inline void BReply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.b_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.b_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BReply::~BReply() {
  // @@protoc_insertion_point(destructor:SimplestOT.BReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BReply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.b_.Destroy();
}

void BReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SimplestOT.BReply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.b_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string B = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_b();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SimplestOT.BReply.B"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BReply::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimplestOT.BReply)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string B = 1;
  if (!this->_internal_b().empty()) {
    const std::string& _s = this->_internal_b();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "SimplestOT.BReply.B");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimplestOT.BReply)
  return target;
}

::size_t BReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimplestOT.BReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string B = 1;
  if (!this->_internal_b().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_b());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BReply::GetClassData() const { return &_class_data_; }


void BReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BReply*>(&to_msg);
  auto& from = static_cast<const BReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SimplestOT.BReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_b().empty()) {
    _this->_internal_set_b(from._internal_b());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BReply::CopyFrom(const BReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimplestOT.BReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BReply::IsInitialized() const {
  return true;
}

void BReply::InternalSwap(BReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.b_, lhs_arena,
                                       &other->_impl_.b_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SimplestOT_2eproto_getter, &descriptor_table_SimplestOT_2eproto_once,
      file_level_metadata_SimplestOT_2eproto[2]);
}
// ===================================================================

class CTReply::_Internal {
 public:
};

CTReply::CTReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SimplestOT.CTReply)
}
CTReply::CTReply(const CTReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CTReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SimplestOT.CTReply)
}

inline void CTReply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CTReply::~CTReply() {
  // @@protoc_insertion_point(destructor:SimplestOT.CTReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CTReply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CTReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CTReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SimplestOT.CTReply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CTReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SimplestOT.CTReply.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CTReply::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimplestOT.CTReply)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "SimplestOT.CTReply.message");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimplestOT.CTReply)
  return target;
}

::size_t CTReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimplestOT.CTReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CTReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CTReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CTReply::GetClassData() const { return &_class_data_; }


void CTReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CTReply*>(&to_msg);
  auto& from = static_cast<const CTReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SimplestOT.CTReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CTReply::CopyFrom(const CTReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimplestOT.CTReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTReply::IsInitialized() const {
  return true;
}

void CTReply::InternalSwap(CTReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CTReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SimplestOT_2eproto_getter, &descriptor_table_SimplestOT_2eproto_once,
      file_level_metadata_SimplestOT_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace SimplestOT
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SimplestOT::ARequest*
Arena::CreateMaybeMessage< ::SimplestOT::ARequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SimplestOT::ARequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SimplestOT::CTRequest*
Arena::CreateMaybeMessage< ::SimplestOT::CTRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SimplestOT::CTRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SimplestOT::BReply*
Arena::CreateMaybeMessage< ::SimplestOT::BReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SimplestOT::BReply >(arena);
}
template<> PROTOBUF_NOINLINE ::SimplestOT::CTReply*
Arena::CreateMaybeMessage< ::SimplestOT::CTReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SimplestOT::CTReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
