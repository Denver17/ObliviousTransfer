// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NonInteractiveOT.proto

#include "NonInteractiveOT.pb.h"
#include "NonInteractiveOT.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace NonInteractiveOT {

static const char* OT_method_names[] = {
  "/NonInteractiveOT.OT/SendParam",
};

std::unique_ptr< OT::Stub> OT::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OT::Stub> stub(new OT::Stub(channel, options));
  return stub;
}

OT::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendParam_(OT_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OT::Stub::SendParam(::grpc::ClientContext* context, const ::NonInteractiveOT::Param& request, ::NonInteractiveOT::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NonInteractiveOT::Param, ::NonInteractiveOT::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendParam_, context, request, response);
}

void OT::Stub::async::SendParam(::grpc::ClientContext* context, const ::NonInteractiveOT::Param* request, ::NonInteractiveOT::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NonInteractiveOT::Param, ::NonInteractiveOT::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendParam_, context, request, response, std::move(f));
}

void OT::Stub::async::SendParam(::grpc::ClientContext* context, const ::NonInteractiveOT::Param* request, ::NonInteractiveOT::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NonInteractiveOT::Reply>* OT::Stub::PrepareAsyncSendParamRaw(::grpc::ClientContext* context, const ::NonInteractiveOT::Param& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NonInteractiveOT::Reply, ::NonInteractiveOT::Param, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendParam_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NonInteractiveOT::Reply>* OT::Stub::AsyncSendParamRaw(::grpc::ClientContext* context, const ::NonInteractiveOT::Param& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendParamRaw(context, request, cq);
  result->StartCall();
  return result;
}

OT::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OT_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OT::Service, ::NonInteractiveOT::Param, ::NonInteractiveOT::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NonInteractiveOT::Param* req,
             ::NonInteractiveOT::Reply* resp) {
               return service->SendParam(ctx, req, resp);
             }, this)));
}

OT::Service::~Service() {
}

::grpc::Status OT::Service::SendParam(::grpc::ServerContext* context, const ::NonInteractiveOT::Param* request, ::NonInteractiveOT::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace NonInteractiveOT

